    //jQuery.validator.setDefaults({
    //    debug: false,
    //    success: "valid"
    //});

    //$("#myform").validate({
    //    rules: {
    //        Name: {
    //            required: true
    //        },
    //        Password: {
    //            required: true
    //        }
    //    },
    //    submitHandler: function (form) {
    //        // do other things for a valid form
    //        form.submit();
    //    },
    //    invalidHandler: function (event, validator) {
    //        // 'this' refers to the form
    //        $("#wrongPswdContainer").hide();
    //        var errors = validator.numberOfInvalids();
    //        if (errors) {
    //            var message = 'Please fill all the fields';
    //            $("#errorContainer").html(message);
    //            $("#errorContainer").show();
    //            $("#errorContainer").fadeOut(3000);
    //        } else {
    //            $("#errorContainer").hide();
    //        }
    //    },
    //    messages: {
    //        Name: {
    //            required: ""
    //        },
    //        Password: {
    //            required: ""
    //        }
    //    }
    //});

string[] workers = workersStr.Split(new [] {", "}, StringSplitOptions.RemoveEmptyEntries);


<script>
    
    //$("a").on("click", function (e) {
    //    e.preventDefault(); // cancel the link itself
    //    $(this).prev().submit();
    //});

</script>

//Comments = _manager.GetTaskComments(taskId)
//    .Select(c => new TaskModel.CommentModel
//            {
//                Content = c.Content,
//                Date = c.Date.ToString(),
//                Id = c.Id,
//                User = c.User.
//            })

    @*@foreach (var worker in Model.Workers.Take(Model.Workers.Count() - 1))
    {
        @(worker.Username + ", ");
    }@(Model.Workers.ElementAt(Model.Workers.Count() - 1).Username)<br>*@

----------------------------------------------------------

public class TeamModel
{
    [Required, DisplayName("Content")]
    public string Content { get; set; }

    [Required, DisplayName("Workers"), RegularExpression(@"([^,]+,{0,1})+")]
    public string Workers { get; set; }

    [Required]
    public int ManagerId { get; set; }
}

public class TaskModel
{
    public int Id { get; set; }
    public string Content { get; set; }
    public int Percentage { get; set; }
    public string WorkersStr { get; set; }
    public IEnumerable<UserModel> Workers { get; set; }
    public UserModel Manager { get; set; }
    public IEnumerable<CommentModel> Comments { get; set; }
    public CommentModel NewComment { get; set; }
    public string Date { get; set; }
    public bool IsDone { get; set; }
}

[HttpPost]
public ActionResult LogIn(LogInModel userModel)
{
    if (ModelState.IsValid)
    {
        if (_manager.UserExists(userModel.Username))
        {
            User dbUser = _manager.GetUser(userModel.Username);

            try
            {
                if (BCrypt.Net.BCrypt.Verify(userModel.Password, dbUser.Password))
                {
                    Authorize(dbUser);

                    var redirectResult = GetRedirectResultOfReturnUrl(userModel.ReturnUrl);
                    if (redirectResult != null)
                    {
                        return redirectResult;
                    }

                    if (UserPrincipal.CurrentPrincipal.IsManager)
                    {
                        return Redirect(Url.Action(TeamsController.IndexAction, TeamsController.ControllerName));
                    }
                    return Redirect(Url.Action(TasksController.IndexAction, TasksController.ControllerName));
                }

                ModelState.AddModelError("Password", "Password is wrong!");
                SaveModelState(ModelState);
                return RedirectToAction(LogInAction);
            }
            catch (SaltParseException)
            {
                ModelState.AddModelError("Password", "Password is wrong!");
                SaveModelState(ModelState);
                return RedirectToAction(LogInAction);
            }
        }

        ModelState.AddModelError("Username", "This username doesn't exist");
        SaveModelState(ModelState);
        return RedirectToAction(LogInAction);
    }

    SaveModelState(ModelState);
    return RedirectToAction(LogInAction);
}
